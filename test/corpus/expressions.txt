================================================================================
Self
================================================================================

@implementation ClassName
- sel {
    self;
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (self))))))

================================================================================
Message expression: super receiver
================================================================================

@implementation ClassName
- sel {
    [super sel];
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (message_expression
            receiver: (super)
            selector: (identifier)))))))

================================================================================
Message expression: keyword arguments
================================================================================

@implementation ClassName
- sel {
    [obj k1: a1 k2: a2];
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (message_expression
            receiver: (identifier)
            selector: (keyword_argument_list
              (keyword_argument
                keyword: (identifier)
                argument: (identifier))
              (keyword_argument
                keyword: (identifier)
                argument: (identifier)))))))))

================================================================================
Message expression: anonymous keyword
================================================================================

@implementation ClassName
- sel {
    [obj : a2];
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (message_expression
            receiver: (identifier)
            selector: (keyword_argument_list
              (keyword_argument
                argument: (identifier)))))))))

================================================================================
Selector expression
================================================================================

@implementation ClassName
- sel {
    @selector(foo::);
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (selector_expression
            (keyword_name
              (identifier))
            (keyword_name)))))))

================================================================================
Protocol expression
================================================================================

@implementation ClassName
- sel {
    @protocol(P1);
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (protocol_expression
            (identifier)))))))

================================================================================
Encode expression
================================================================================

@implementation ClassName
- sel {
    @encode(id);
}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    name: (identifier)
    (method_definition
      scope: (instance_scope)
      selector: (identifier)
      body: (compound_statement
        (expression_statement
          (encode_expression
            (type_descriptor
              type: (type_identifier))))))))

================================================================================
At expression: At string literal
================================================================================

NSString * a = @"Test";

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (string_literal
          (string_content))))))

================================================================================
At expression: At number literal
================================================================================

NSNumber *fortyTwo = @42;
NSNumber *fortyTwoUnsigned = @42U;
NSNumber *fortyTwoLong = @42L;
NSNumber *fortyTwoLongLong = @42LL;

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal)))))

================================================================================
At expression: At char literal
================================================================================

NSNumber *theLetterZ = @'Z';

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (char_literal
          (character))))))

================================================================================
At expression: At array literal
================================================================================

NSArray *elements = @[ @"H", @"He", @"O", @"C" ];
NSArray *elements = @[  ];
NSArray *elements = @[ @[ @"H" ], @"He" ];

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal
          (objc_at_expression
            (string_literal
              (string_content)))
          (objc_at_expression
            (string_literal
              (string_content)))
          (objc_at_expression
            (string_literal
              (string_content)))
          (objc_at_expression
            (string_literal
              (string_content)))))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal
          (objc_at_expression
            (array_literal
              (objc_at_expression
                (string_literal
                  (string_content)))))
          (objc_at_expression
            (string_literal
              (string_content))))))))

================================================================================
At expression: At dictionary literal
================================================================================

NSDictionary *dictionary = @{
    @"key" : @[]
};

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (dictionary_literal
          key: (objc_at_expression
            (string_literal
              (string_content)))
          value: (objc_at_expression
            (array_literal)))))))

================================================================================
For in statement
================================================================================

for (int a in b) {
  if ( a == 3 ) {
    return;
  }
}

--------------------------------------------------------------------------------

(translation_unit
  (for_in_statement
    type: (primitive_type)
    declaration: (identifier)
    expression: (identifier)
    body: (compound_statement
      (if_statement
        condition: (parenthesized_expression
          (binary_expression
            left: (identifier)
            right: (number_literal)))
        consequence: (compound_statement
          (return_statement))))))

================================================================================
Encode expression with pointer as argument
================================================================================

char *buf1 = @encode(int **);

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    (primitive_type)
    (init_declarator
      (pointer_declarator
        (identifier))
      (encode_expression
        (type_descriptor
          (primitive_type)
          (abstract_pointer_declarator
            (abstract_pointer_declarator)))))))

================================================================================
Call expression
================================================================================

foo(args, char*);

--------------------------------------------------------------------------------

(translation_unit
  (expression_statement
    (call_expression
      (identifier)
      (argument_list
        (identifier)
        (type_descriptor
          (primitive_type)
          (abstract_pointer_declarator))))))

================================================================================
Keyword selector
================================================================================

@implementation ClassName
- (Foo *)foo:(Bar * __autoreleasing *)foo {}
@end

--------------------------------------------------------------------------------

(translation_unit
  (class_implementation
    (identifier)
    (method_definition
      (instance_scope)
      (type_descriptor
        (type_identifier)
        (abstract_pointer_declarator))
      (keyword_selector
        (keyword_declarator
          (identifier)
          (type_descriptor
            (type_identifier)
            (abstract_pointer_declarator))
          (type_descriptor
            (type_identifier)
            (abstract_pointer_declarator))
          (identifier)))
      (compound_statement))))

================================================================================
Autoreleasepool statement
================================================================================

@autoreleasepool {
    block(context, argc, argv);
}

--------------------------------------------------------------------------------

(translation_unit
  (autoreleasepool_statement
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (argument_list
            (identifier)
            (identifier)
            (identifier)))))))

================================================================================
Bridge cast
================================================================================

(__bridge void *)(self);

--------------------------------------------------------------------------------

(translation_unit
  (expression_statement
    (cast_expression
      (type_descriptor
        (primitive_type)
        (abstract_pointer_declarator))
      (parenthesized_expression
        (self)))))

================================================================================
Bridge cast
================================================================================

(__bridge void *)(self);

--------------------------------------------------------------------------------

(translation_unit
  (expression_statement
    (cast_expression
      (type_descriptor
        (primitive_type)
        (abstract_pointer_declarator))
      (parenthesized_expression
        (self)))))

================================================================================
Demarcation
================================================================================

NS_ASSUME_NONNULL_BEGIN
NS_ASSUME_NONNULL_END

--------------------------------------------------------------------------------

(translation_unit
  (demarcation)
  (demarcation))
