==================
Self
==================

@implementation ClassName
- sel {
    self;
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (self)

          )))))


==================
Message expression: super receiver
==================

@implementation ClassName
- sel {
    [super sel];
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (message_expression
              receiver: (super)
              selector: (identifier))

          )))))


==================
Message expression: keyword arguments
==================

@implementation ClassName
- sel {
    [obj k1: a1 k2: a2];
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (message_expression
              receiver: (identifier)
              selector: (keyword_argument_list
                (keyword_argument
                  keyword: (identifier)
                  argument: (identifier))
                (keyword_argument
                  keyword: (identifier)
                  argument: (identifier))))

          )))))


==================
Message expression: anonymous keyword
==================

@implementation ClassName
- sel {
    [obj : a2];
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (message_expression
              receiver: (identifier)
              selector: (keyword_argument_list
                (keyword_argument
                  argument: (identifier))))

          )))))


==================
Selector expression
==================

@implementation ClassName
- sel {
    @selector(foo::);
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (selector_expression
              (keyword_name
                (identifier))
              (keyword_name))

          )))))


==================
Protocol expression
==================

@implementation ClassName
- sel {
    @protocol(P1);
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (protocol_expression
              (identifier))

          )))))


==================
Encode expression
==================

@implementation ClassName
- sel {
    @encode(id);
}
@end

---

(translation_unit
  (class_implementation
    name: (identifier)
      (method_definition
        scope: (instance_scope)
        selector: (identifier)
        body: (compound_statement
          (expression_statement

            (encode_expression
              (identifier))

          )))))


==================
At expression: At string literal
==================

NSString * a = @"Test";

---

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (string_literal)))))


==================
At expression: At number literal
==================

NSNumber *fortyTwo = @42;
NSNumber *fortyTwoUnsigned = @42U;
NSNumber *fortyTwoLong = @42L;
NSNumber *fortyTwoLongLong = @42LL;

---

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (number_literal)))))


==================
At expression: At char literal
==================

NSNumber *theLetterZ = @'Z';

---

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (char_literal)))))


==================
At expression: At array literal
==================

NSArray *elements = @[ @"H", @"He", @"O", @"C" ];
NSArray *elements = @[  ];
NSArray *elements = @[ @[ @"H" ], @"He" ];

---

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal
          (objc_at_expression
            (string_literal))
          (objc_at_expression
            (string_literal))
          (objc_at_expression
            (string_literal))
          (objc_at_expression
            (string_literal))))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal))))
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (array_literal
          (objc_at_expression
            (array_literal
              (objc_at_expression
                (string_literal))))
          (objc_at_expression
            (string_literal)))))))


==================
At expression: At dictionary literal
==================

NSDictionary *dictionary = @{
    @"key" : @[]
};

---

(translation_unit
  (declaration
    type: (type_identifier)
    declarator: (init_declarator
      declarator: (pointer_declarator
        declarator: (identifier))
      value: (objc_at_expression
        (dictionary_literal
          key: (objc_at_expression
            (string_literal))
          value: (objc_at_expression
            (array_literal)))))))